#!/usr/bin/env perl

# Copyright © 2019-2023 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

no lib '.';  # CVE-2016-1238

use strict;
use warnings;
use v5.14;

use English qw(-no_match_vars);
use Getopt::Long ();
use HTTP::Tiny ();
use JSON::PP ();
use Time::Piece ();

use HTTP::CookieJar ();

my $prog = $PROGRAM_NAME =~ s{.*/}{}r;

my $cookie_jar = HTTP::CookieJar->new;
my %http_options = (
    agent => 'pacz (https://github.com/jwilk/pacz)',
    cookie_jar => $cookie_jar,
    verify_SSL => 1,
);
my $http = HTTP::Tiny->new(%http_options);

my $jp = JSON::PP->new->utf8->pretty;

sub useca
{
    my ($ca) = @_;
    my $cadir = '/usr/share/ca-certificates/mozilla';
    my $cafile = "$cadir/$ca.crt";
    if (-d $cadir) {
        $http = HTTP::Tiny->new(
            %http_options,
            SSL_options => {SSL_ca_file => $cafile}
        );
    }
    return;
}

sub xurlget
{
    my ($url, $data, $args) = @_;
    my $response;
    if (defined $data) {
        if (ref $data eq '') {
            $args = {
                %{$args // {}},
                content => $data,
            };
            $response = $http->post($url, $args);
        } else {
            $response = $http->post_form($url, $data, $args // {});
        }
    } else {
        $response = $http->get($url, $args // {});
    }
    if (not $response->{success}) {
        if ($response->{status} == 599) {
            die "<$url>: $response->{content}";
        } else {
            die "<$url>: $response->{status} $response->{reason}";
        }
    }
    return $response;
}

sub urlget
{
    my @args = @_;
    my $response = xurlget(@args);
    return $response->{content};
}

my $use_yaml = 1;

sub dump_yaml
{
    local ($_) = @_;
    if ($use_yaml) {
        eval {
            require YAML::XS;
        } or do {
            $use_yaml = 0;
        };
    }
    if ($use_yaml) {
        local $YAML::XS::Boolean = 'JSON::PP';
        scalar $YAML::XS::Boolean;  # inhibit "used only once" warning
        $_ = YAML::XS::Dump($_);
        s/^---\n//;
    } else {
        $_ = $jp->encode($_);
    }
    print;
    return;
}

sub warning
{
    my ($msg) = @_;
    say {*STDERR} "pacz: $msg";
    return;
}

sub fatal
{
    my ($msg) = @_;
    warning($msg);
    exit 1;
}

sub quote
{
    my ($x) = @_;
    state $json_encoder = JSON::PP->new->ascii->allow_nonref;
    return $json_encoder->encode($x);
}

sub quote::TIEHASH
{
    my ($class) = @_;
    return bless {}, $class;
}

sub quote::FETCH
{
    my ($self, $index) = @_;
    return quote($index);
}

tie my %Q, 'quote';  ## no critic (ProhibitTies)

my $cname_regexp = qr/\A[[:alnum:].-]+\z/a;

my %aliases;
sub alias
{
    my ($cname, @aliases) = @_;
    $cname =~ $cname_regexp
        or die "bad carrier name $Q{$cname}";
    my $uname = $cname =~ s/-/_/rg;
    $carrier::{$uname}
        or die "no such carrier $Q{$cname}";
    for my $alias (@aliases) {
        $alias =~ $cname_regexp
            or die "bad alias name $Q{$alias}";
        push @{$aliases{$cname}}, $alias;
    }
    return;
}

sub carrier::allegro
{
    my ($ident) = @_;
    my $x = qr/[0-9a-f]/;
    my ($order_uuid) = ($ident =~ m/\b(${x}{8}-${x}{4}-${x}{4}-${x}{4}-${x}{12})\b/) or
        fatal('allegro: missing order UUID');
    $x = qr/[0-9A-F]/;
    my ($tracking_id) = ($ident =~ m/\b(ALE${x}{12})\b/) or
        fatal('allegro: missing tracking ID');
    useca('DigiCert_Global_Root_CA');
    $http->agent('Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0');
    $http->default_headers({
        'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language' => 'en-US,en;q=0.5',
        'Upgrade-Insecure-Requests' => '1',
    });
    my $url = "https://allegro.pl/przesylka/sledzenie/${order_uuid}?waybillId=${tracking_id}&carrierId=ALLEGRO";
    my $html = urlget($url);
    my $ok;
    while ($html =~ m{<section\b[^>]*>(.*?)</section>}g) {
        $_ = $1;
        s{</?div\b[^>]*>}{\n}g;
        s{</?ol\b[^>]*>}{\n}g;
        s{<br\b[^>]*>}{\n}g;
        s{</?span\b[^>]*>}{}g;
        s{</?(?:p)\b[^>]*>}{ | }g;
        s{<li\b[^>]*>(.*?)</li>}{• $1\n}g;
        s{• \K [|] }{}g;
        s{ [|] *[|] }{ | }g;
        s{ *[|] *$}{}mg;
        s{^ *[|] *}{}mg;
        s{^\n+}{};
        s{\n+\z}{};
        s{\n\n+}{\n}g;
        say;
        say '';
        $ok = 1;
    }
    if (not $ok) {
        die 'allegro: cannot extract tracking info';
    }
    return;
}

alias('allegro', qw(allegro.pl));

sub carrier::dpd
{
    my ($ident) = @_;
    $ident =~ /\A[[:alnum:]]+\z/a or
        fatal('dpd: bad ID format');
    useca('DigiCert_Global_Root_G2');
    my $url = 'https://tracktrace.dpd.com.pl/findPackage';
    $_ = urlget($url, ['q', $ident, 'typ', 1]);
    m{<table class="table-track">(.*?)</table>}s
        or die 'dpd: cannot extract tracking table';
    $_ = $1;
    s{<thead>(?:.*?)</thead>}{}s;
    s{\s*</?tbody>\s*}{}g;
    s{\s*</t[dr]>\s*}{}g;
    s{\s*<td>}{\t}g;
    s{\s*<tr\b[^>]*>\t}{\n}g;
    s{\s*<br>}{; }g;
    s{&nbsp;}{ }g;
    s{\A\n+}{};
    say;
    return;
}

alias('dpd', qw(dpd.com.pl));

sub decode_entities  ## no critic (RequireArgUnpacking)
{
    for my $s (@_) {
        $s =~ s/&#([0-9]+);/chr($1)/eg;
    }
    return;
}

sub carrier::gls
{
    my ($ident) = @_;
    $ident =~ /\A\d+\z/a or
        fatal('gls: bad ID format');
    useca('GlobalSign_Root_CA_-_R3');
    my $uts = Time::Piece->new->epoch;
    my $ts = "${uts}000";
    my $url = "https://gls-group.eu/app/service/open/rest/PL/pl/rstt001?match=$ident&millis=$ts";
    my $data = urlget($url);
    $data = $jp->decode($data);
    $data = $data->{tuStatus}->[0];
    delete $data->{progressBar};
    for my $history (@{$data->{history}}) {
        decode_entities($history->{evtDscr});
    }
    my $arrival = $data->{arrivalTime};
    decode_entities(
        $arrival->{name},
        $arrival->{value},
    );
    dump_yaml($data);
    return;
}

alias('gls', qw(gls-group.eu));

sub remove_null_cruft
{
    my ($data) = @_;
    for my $key (keys %{$data}) {
        my $value = $data->{$key};
        if (not defined $value) {
            delete $data->{$key};
        } elsif (ref $value eq 'HASH') {
            remove_null_cruft($value);
            if (%{$value} == 0) {
                delete $data->{$key};
            }
        } elsif (ref $value eq 'ARRAY') {
            if (@{$value} == 0) {
                delete $data->{$key};
            }
            for my $item (@{$value}) {
                if (ref $item eq 'HASH') {
                    remove_null_cruft($item);
                }
            }
        }
    }
    return;
}

sub carrier::inpost
{
    my ($ident) = @_;
    $ident =~ /\A\d+\z/a or
        fatal('inpost: bad ID format');
    useca('DigiCert_Global_Root_CA');
    my $url = "https://api-shipx-pl.easypack24.net/v1/tracking/$ident";
    my $data = urlget($url);
    $data =~ s/\\u0026apos;/'/g;
    $data =~ s/\\u0026amp;/&/g;
    $data = $jp->decode($data);
    remove_null_cruft($data);
    dump_yaml($data);
    return;
}

alias('inpost', qw(inpost.pl));

sub carrier::orlen
{
    my ($ident) = @_;
    $ident =~ /\A\d+\z/a or
        fatal('orlen: bad ID format');
    useca('Certum_Trusted_Network_CA');
    my $uts = Time::Piece->new->epoch;
    my $ts = "${uts}000";
    my $url = "https://nadaj.orlenpaczka.pl/parcel/api-status?id=$ident&jsonp=callback&_=$ts";
    my $data = urlget($url);
    $data =~ s/^callback[(]|[)];$//g;
    $data = $jp->decode($data);
    delete $data->{historyHtml};
    delete $data->{full};
    for my $key (qw(returnTruck truckNo)) {
        if (exists $data->{$key} and $data->{$key} eq 'Brak danych') {
            delete $data->{$key};
        }
    }
    for my $item (@{$data->{history}}) {
        $item->{date} =~ s/\A(\d{2})-(\d{2})-(\d{4}), (\d{2}:\d{2})\z/$3-$2-$1 $4/;
        $item->{label} =~ s/\s+\z//;
    }
    dump_yaml($data);
    return;
}

alias('orlen', qw(orlenpaczka.pl paczkawruchu));

sub carrier::pharmalink
{
    my ($ident) = @_;
    $ident =~ /\A[[:alnum:]]{64}\z/a or
        fatal('pharmalink bad ID format');
	useca('Certum_Trusted_Network_CA');
    my $url = "https://pharmalink.pl/web/sledzenie_www.php?id=$ident";
    my $html = urlget($url);
    my $number;
    if ($html =~ m{\bOgladasz historię listu <b>(\w+)</b>}) {
        $number = $1;
    } else {
        fatal('pharmalink: cannot extract letter number');
    }
    print "$number\n";
    while ($html =~ m{<tr\b[^>]*>(.*?)</tr>}sg) {
        my $tr = $1;
        my @line;
        while ($tr =~ m{<td\b[^>]*>(.*?)</td>}sg) {
            my $text = $1;
            $text =~ s/<br>$//;
            push @line, $text;
        }
        {
            local $LIST_SEPARATOR = "\t";
            say "@line";
        }
    }
    return;
}

alias('pharmalink', qw(pharmalink.pl));

sub carrier::poczta
{
    my ($ident) = @_;
    $ident =~ /\A[[:alnum:]]+\z/a or
        fatal('poczta: bad ID format');
    useca('Certum_Trusted_Network_CA');
    my $api_endpoint = 'https://uss.poczta-polska.pl/uss/v1.1/tracking';
    my $url = "https://emonitoring.poczta-polska.pl/?numer=$ident";
    $_ = urlget($url);
    m{<div id="widgetTracking" data-urltracking="\Q$api_endpoint\E" data-apikey="([\w+/.=]+)"/>}
        or die "<$url>: cannot extract API key";
    my $api_key = $1;
    $url = "$api_endpoint/checkmailex";
    my $data = qq({"language":"PL","number":"$ident","addPostOfficeInfo":true});
    my $args = {
        headers => {
            'API_KEY' => $api_key,
            'Content-Type' => 'application/json; charset=utf-8',
        }
    };
    $data = urlget($url, $data, $args);
    $data = $jp->decode($data);
    my $clean_office = sub {
        my ($office, %opts) = @_;
        my $descr = $office->{description};
        $opts{keep_hours} or
            delete $descr->{openingHours};
        if (($descr->{latitude} // 0) == 0 and ($descr->{longitude} // 0) == 0) {
            # 0°N 0°E is in the ocean: https://en.wikipedia.org/wiki/Null_Island
            # It can't possibly be the correct location of a post office.
            delete $descr->{latitude};
            delete $descr->{longitude};
        }
    };
    my $mailinfo = $data->{mailInfo};
    for my $key (keys %{$data}) {
        if ($key ne 'mailInfo') {
            $mailinfo->{$key} = $data->{$key};
        }
    }
    $data = $mailinfo;
    $clean_office->($data->{dispatchPostOffice});
    $clean_office->($data->{recipientPostOffice}, keep_hours => 1);
    for my $item (@{$data->{events}}) {
        for my $key (qw(finished canceled)) {
            if (exists $item->{$key} and JSON::PP::is_bool($item->{$key}) and not $item->{$key}) {
                delete $item->{$key};
            }
        }
        if (exists $item->{postOffice}) {
            $clean_office->($item->{postOffice});
        }
    }
    dump_yaml($data);
    return;
}

alias('poczta', qw(poczta-polska.pl poczta-polska));

sub carrier::pointpack
{
    my ($ident) = @_;
    $ident =~ /\A\d+\z/a or
        fatal('pointpack: bad ID format');
    useca('Certum_Trusted_Network_CA');
    my $url = "https://www.pointpack.pl/rest/api/v1/tracking/$ident";
    my $data = urlget($url);
    $data = $jp->decode($data);
    for my $item (@{$data}) {
        my $date = $item->{date};
        $date = Time::Piece::localtime($date / 1000);
        $item->{date} = $date->datetime;
        if (not defined $item->{notes}) {
            delete $item->{notes};
        }
    }
    dump_yaml($data);
    return;
}

alias('pointpack', qw(pointpack.pl));

sub carrier::poltraf
{
    my ($ident) = @_;
    $ident =~ /\A\d+\z/a or
        fatal('poltraf: bad ID format');
    useca('Certum_Trusted_Network_CA');
    $_ = urlget("https://poltraf.pl/zarzadzanie_przesylkami.html?go=ok&nr_przesylki=$ident");
    m{<tbody\b[>]*>(.*?)</tbody>}s
        or die 'poltraf: cannot extract tracking table';
    $_ = $1;
    s{\s*</t[dr]>\s*}{}g;
    s{\s+}{ }g;
    s{\s*<td>}{\t}g;
    s{\s*<tr\b[^>]*>\t}{\n}g;
    s{\A\n+}{};
    say;
    return;
}

alias('poltraf', qw(poltraf.pl));

sub carrier::swiss_post
{
    my ($ident) = @_;
    $ident =~ /\A[[:alnum:].]+\z/a or
        fatal('swiss-post: bad ID format');
    useca('SwissSign_Gold_CA_-_G2');
    my $response = xurlget('https://service.post.ch/ekp-web/api/user');
    my $data = $response->{content};
    $data = $jp->decode($data);
    my $user_id = $data->{userIdentifier};
    my $wfu_user_id = $http->www_form_urlencode({userId => $user_id});
    my $csrf_token = $response->{headers}->{'x-csrf-token'};
    my $url = "https://service.post.ch/ekp-web/api/history?$wfu_user_id";
    my $post_data = qq({"searchQuery":"$ident"});
    my $args = {
        headers => {
            'Content-Type' => 'application/json',
            'x-csrf-token' => $csrf_token,
        }
    };
    $data = urlget($url, $post_data, $args);
    $data = $jp->decode($data);
    my $hash = $data->{hash};
    $hash =~ /\A[\da-f]+\z/a or
        die "swiss-post: bad hash $Q{$hash}";
    $url = "https://service.post.ch/ekp-web/api/history/not-included/$hash?$wfu_user_id";
    $data = urlget($url);
    $data = $jp->decode($data);
    if (scalar @{$data} != 1) {
        my $n = scalar @{$data};
        die "swiss-post: bad number of items ($n != 1)";
    }
    ($data) = @{$data};
    my $identity = delete $data->{identity};
    $identity =~ /\A[\w-]+\z/a
        or die "swiss-post: bad identity $Q{$identity}";
    if (exists $data->{events}) {
        die 'swiss-post: events key already exists';
    }
    $url = "https://service.post.ch/ekp-web/api/shipment/id/$identity/events/";
    my $events_data = urlget($url);
    $data->{events} = $jp->decode($events_data);
    remove_null_cruft($data);
    dump_yaml($data);
    return;
}

alias('swiss-post', qw(post.ch));

sub carrier::ups
{
    my ($ident) = @_;
    $ident =~ /\A[[:alnum:]]+\z/a or
        fatal('ups: bad ID format');
    useca('COMODO_ECC_Certification_Authority');
    my $url = "https://www.ups.com/track?tracknum=$ident&requester=ST/trackdetails";
    urlget($url);
    my $xsrf_token;
    for my $cookie ($cookie_jar->cookies_for($url)) {
        if ($cookie->{name} eq 'X-XSRF-TOKEN-ST') {
            $xsrf_token = $cookie->{value};
            $xsrf_token =~ /\A[\w-]+\z/
                or die "ups: bad XSRF token $Q{$xsrf_token}";
        }
    }
    defined $xsrf_token
        or die 'ups: cannot extract XSRF token';
    my $locale = 'en_GB'; # 24-hour time, DD/MM/YYYY date format
    my $post_data = qq({"Locale":"$locale","TrackingNumber":["$ident"],"Requester":"","returnToValue":""});
    my $request_opts = {
        headers => {
            'Content-Type' => 'application/json',
            'Referer' => $url,
            'X-XSRF-TOKEN' => $xsrf_token,
        }
    };
    $url = "https://www.ups.com/track/api/Track/GetStatus?loc=$locale";
    my $data = urlget($url, $post_data, $request_opts);
    $data = $jp->decode($data);
    my $status_code = $data->{statusCode};
    if ($status_code != 200) {
        my $status = $data->{statusText};
        die "ups: bad status $Q{$status_code} $Q{$status}";
    }
    my $details = $data->{trackDetails};
    if (scalar @{$details} != 1) {
        my $n = scalar @{$details};
        die "ups: bad number of items ($n != 1)";
    }
    ($data) = @{$details};
    remove_null_cruft($data);
    my $format_datetime = sub {
        my ($date, $time) = @_;
        my $xdate = Time::Piece->strptime($date, '%d/%m/%Y')
            or die "upc: bad date $Q{$date}";
        my $xtime = Time::Piece->strptime($time, '%H:%M')
            or die "upc: bad time $Q{$time}";
        return $xdate->ymd . 'T' . $xtime->hms;
    };
    delete $data->{sendUpdatesOptions};
    if ($data->{deliveredDate} and $data->{deliveredTime}) {
        my $date = delete $data->{deliveredDate};
        my $time = delete $data->{deliveredTime};
        delete $data->{deliveredDateDetail};
        delete $data->{deliveredDayCMSKey};
        $data->{deliveredDate} = $format_datetime->($date, $time);
    }
    for my $event (@{$data->{shipmentProgressActivities}}) {
        my $date = delete $event->{date};
        my $time = delete $event->{time};
        $event->{date} = $format_datetime->($date, $time);
    }
    dump_yaml($data);
    return;
}

alias('ups', qw(ups.com));

my %carriers;
my @carrier_names;
for my $uname (sort keys %carrier::) {
    my $func = $carrier::{$uname};
    my $cname = $uname =~ s/_/-/rg;
    my $xname = $cname;
    my @caliases = @{$aliases{$cname} // []};
    if (@caliases) {
        $xname .= " (@caliases)";
    }
    push @carrier_names, $xname;
    $carriers{$cname} = $func;
    for my $alias (@caliases) {
        $carriers{$alias} = $func;
    }
}

my $usage_short = "Usage: $prog [-j] CARRIER IDENT\n";
my $usage_short_carriers = "Carriers: @carrier_names\n";
my $usage_carriers = (
    "Carriers:\n" .
    join '', map { "  $_\n" } @carrier_names
);
my $usage_options = <<'EOF';
Options:
  -j, --json  prefer JSON (not YAML) for printing
              machine-readable data
  -h, --help  show this help message and exit
EOF
my $usage_long = "$usage_short\n$usage_carriers\n$usage_options";

sub bad_usage
{
    my %opts = @_;
    my $reason = $opts{reason};
    if (defined $reason) {
        warning($reason);
    }
    my ($usage) = $usage_short;
    if ($opts{show_carriers}) {
        $usage .= $usage_short_carriers;
    }
    print {*STDERR} $usage;
    exit 1;
}

sub main
{
    my $opt_help;
    {
        local $SIG{__WARN__} = sub {
            my ($msg) = @_;
            $msg = lcfirst $msg;
            $msg =~ s/\n+\z//;
            bad_usage(reason => $msg);
        };
        Getopt::Long::GetOptions(
            'h|help' => \$opt_help,
            'j|json' => sub { $use_yaml = 0; },
        ) or bad_usage;
    }
    if ($opt_help) {
        print $usage_long;
        exit 0;
    }
    if (@ARGV < 2) {
        bad_usage(reason => 'too few arguments')
    }
    if (@ARGV > 2) {
        bad_usage(reason => 'too many arguments')
    }
    my ($cname, $ident) = @ARGV;
    if (my $action = $carriers{$cname}) {
        $action->($ident);
    } else {
        bad_usage(reason => "no such carrier $Q{$cname}", show_carriers => 1);
    }
    return;
}

if (not caller) {
    main;
}

1;

# vim:ts=4 sts=4 sw=4 et
