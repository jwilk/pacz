#!/usr/bin/env perl

# Copyright © 2019-2021 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

no lib '.';  # CVE-2016-1238

use strict;
use warnings;
use v5.14;

use English qw(-no_match_vars);
use HTTP::Tiny;
use JSON::PP;
use Time::Piece;

use HTTP::CookieJar;

my $prog = $PROGRAM_NAME =~ s{.*/}{}r;

my $cookie_jar = HTTP::CookieJar->new;
my %http_options = (
    agent => 'pacz (https://github.com/jwilk/pacz)',
    cookie_jar => $cookie_jar,
    verify_SSL => 1,
);
my $http = HTTP::Tiny->new(%http_options);

my $jp = JSON::PP->new->utf8->pretty;

sub useca
{
    my ($ca) = @_;
    my $cadir = '/usr/share/ca-certificates/mozilla';
    my $cafile = "$cadir/$ca.crt";
    if (-d $cadir) {
        $http = HTTP::Tiny->new(
            %http_options,
            SSL_options => {SSL_ca_file => $cafile}
        );
    }
    return;
}

sub urlget
{
    my ($url, $data) = @_;
    my $response;
    if (defined $data) {
        $response = $http->post_form($url, $data);
    } else {
        $response = $http->get($url);
    }
    if (not $response->{success}) {
        if ($response->{status} == 599) {
            die "<$url>: $response->{content}";
        } else {
            die "<$url>: $response->{status} $response->{reason}";
        }
    }
    return $response->{content};
}

sub dump_yaml
{
    local ($_) = @_;
    my $use_yaml = 1;
    eval {
        require YAML::XS;
    } or do {
        $use_yaml = 0;
    };
    if ($use_yaml) {
        no warnings 'once';  ## no critic (ProhibitNoWarnings)
        local $YAML::XS::Boolean = 'JSON::PP';
        $_ = YAML::XS::Dump($_);
        s/^---\n//;
    } else {
        $_ = $jp->encode($_);
    }
    print;
    return;
}

sub do_dpd
{
    my ($ident) = @_;
    useca('Certum_Trusted_Network_CA');
    my $url = 'https://tracktrace.dpd.com.pl/findPackage';
    $_ = urlget($url, ['q', $ident, 'typ', 1]);
    m{<table class="table-track">(.*?)</table>}s or die;
    $_ = $1;
    s{<thead>(?:.*?)</thead>}{}s;
    s{\s*</?tbody>\s*}{}g;
    s{\s*</t[dr]>\s*}{}g;
    s{\s*<td>}{\t}g;
    s{\s*<tr\b[^>]*>\t}{\n}g;
    s{\s*<br>}{; }g;
    s{&nbsp;}{ }g;
    s{\A\n+}{};
    say;
    return;
}

sub do_inpost
{
    my ($ident) = @_;
    useca('DigiCert_Global_Root_CA');
    my $url = "https://api-shipx-pl.easypack24.net/v1/tracking/$ident";
    my $data = urlget($url);
    $data =~ s/\\u0026amp;/&/g;
    $data = $jp->decode($data);
    for my $item (@{$data->{tracking_details}}) {
        if (not defined $item->{agency}) {
            delete $item->{agency};
        }
    }
    dump_yaml($data);
    return;
}

sub do_gls
{
    my ($ident) = @_;
    useca('GlobalSign_Root_CA');
    my $uts = Time::Piece->new->epoch;
    my $ts = "${uts}000";
    my $url = "https://gls-group.eu/app/service/open/rest/PL/pl/rstt001?match=$ident&millis=$ts";
    my $data = urlget($url);
    $data = $jp->decode($data);
    delete $data->{tuStatus}->[0]->{progressBar};
    dump_yaml($data);
    return;
}

sub do_paczkawruchu
{
    my ($ident) = @_;
    useca('DigiCert_Global_Root_G2');
    my $uts = Time::Piece->new->epoch;
    my $ts = "${uts}000";
    my $url = "https://nadaj.paczkawruchu.pl/parcel/api-status?id=$ident&jsonp=callback&_=$ts";
    my $data = urlget($url);
    $data =~ s/^callback[(]|[)];$//g;
    $data = $jp->decode($data);
    delete $data->{historyHtml};
    delete $data->{full};
    my $number = $data->{number};
    if (%{$data->{xml}} == 0) {
        delete $data->{xml};
    } else {
        for my $item (@{$data->{xml}->{NewDataSet}->{PackStatus}}) {
            for my $key (qw(Destination City StreetName Location OpeningHours)) {
                $data->{$key} = $item->{$key};
                delete $item->{$key};
            }
            for my $key (qw(Attribute Cl_Des Cl_From_Des)) {
                my $value = $item->{$key};
                if (ref $value eq 'HASH' and %{$value} == 0) {
                    delete $item->{$key};
                }
            }
            if ($item->{PackCode} eq $number) {
                delete $item->{PackCode};
            }
        }
    }
    dump_yaml($data);
    return;
}

sub do_poczta
{
    my ($ident) = @_;
    useca('Certum_Trusted_Network_CA');
    my $domain = 'emonitoring.poczta-polska.pl';
    my $url = "https://$domain";
    urlget($url);
    my $sid;
    for my $cookie ($cookie_jar->cookies_for($url)) {
        if ($cookie->{name} eq 'PHPSESSID') {
            $sid = $cookie->{value};
            last;
        }
    }
    if (not defined $sid) {
        die "$domain: cannot determine session id";
    }
    $_ = urlget("$url/wssClient.php", ['s', $sid, 'n', $ident, 'l', '']);
    if (/ Brak danych o tej przesyłce /) {
        say {*STDERR} "$domain: no data for $ident";
        exit 1;
    }
    my @tables;
    s{<table\b[^>]*>(.*?)</table>}{push @tables, $1}sge;
    $_ = "@tables";
    s{<a\b[^>]*>(.*?)</a>}{$1}sg;
    s{<tr\b[^>]*>}{\n}g;
    s{<t[dh]\b[^>]*>}{ | }g;
    s{^ [|] }{}mg;
    s{</t[hdr]>}{}g;
    s{  *}{ }g;
    s{ *[|] *$}{ }mg;
    s{^\s+}{}mg;
    s{\s+$}{}mg;
    s{<br />$}{}mg;
    s{<br />}{; }mg;
    s{\n\n+}{\n}g;
    s{\n\z}{};
    say;
    return;
}

sub do_poczta_polska
{
    goto &do_poczta;
}

sub do_poltraf
{
    my ($ident) = @_;
    useca('Certum_Trusted_Network_CA');
    $_ = urlget("https://poltraf.pl/zarzadzanie_przesylkami.html?go=ok&nr_przesylki=$ident");
    m{<tbody\b[>]*>(.*?)</tbody>}s or die;
    $_ = $1;
    s{\s*</t[dr]>\s*}{}g;
    s{\s+}{ }g;
    s{\s*<td>}{\t}g;
    s{\s*<tr\b[^>]*>\t}{\n}g;
    s{\A\n+}{};
    say;
    return;
}

my $usage = <<"EOF";
Usage: $prog PROVIDER IDENT
Providers: dpd inpost gls paczkawruchu poczta-polska poltraf
EOF
sub bad_usage
{
    print {*STDERR} $usage;
    exit 1;
}
if (@ARGV != 2) {
    bad_usage;
}
my ($provider, $ident) = @ARGV;
my $action = "do_${provider}";
$action =~ s/-/_/g;
if (exists &{$action}) {
    $action = \&{$action};
    $action->($ident);
} else {
    bad_usage;
}

# vim:ts=4 sts=4 sw=4 et
